okay let's solve leak code 15 threesome

okay let's solve leak code 15 threesome
the sequel to the popular question to

the sequel to the popular question to

the sequel to the popular question to
some so before you solve this question

some so before you solve this question

some so before you solve this question
the first thing you should do is make

the first thing you should do is make

the first thing you should do is make
sure that you've solved twosome which is

sure that you've solved twosome which is

sure that you've solved twosome which is
the most popular question on leak code

the most popular question on leak code

the most popular question on leak code
so you've probably solved it or at least

so you've probably solved it or at least

so you've probably solved it or at least
seen it before

seen it before

seen it before
I also recommend solving twosome 2 which

I also recommend solving twosome 2 which

I also recommend solving twosome 2 which
is basically to some except the input

is basically to some except the input

is basically to some except the input
array sorted a lot of people skip this

array sorted a lot of people skip this

array sorted a lot of people skip this
question I think that's what makes

question I think that's what makes

question I think that's what makes
threesome a little harder because they

threesome a little harder because they

threesome a little harder because they
don't solve this one first if you solve

don't solve this one first if you solve

don't solve this one first if you solve
twosome n to sum to this question

twosome n to sum to this question

twosome n to sum to this question
threesome is pretty straightforward in

threesome is pretty straightforward in

threesome is pretty straightforward in
my opinion but ok let's get into the

my opinion but ok let's get into the

my opinion but ok let's get into the
question so we're given an input array

question so we're given an input array

question so we're given an input array
of n integers as per usual this array

of n integers as per usual this array

of n integers as per usual this array
though can have duplicates as we can see

though can have duplicates as we can see

though can have duplicates as we can see
in the example right two negative ones

in the example right two negative ones

in the example right two negative ones
in this case now what we want to do is

in this case now what we want to do is

in this case now what we want to do is
find 3 numbers of this array so a B and

find 3 numbers of this array so a B and

find 3 numbers of this array so a B and
C and they and we want them to sum to 0

C and they and we want them to sum to 0

C and they and we want them to sum to 0
so in the example there were two

so in the example there were two

so in the example there were two
elements or two triplets that summed it

elements or two triplets that summed it

elements or two triplets that summed it
to the total 0 now one problem is that

to the total 0 now one problem is that

to the total 0 now one problem is that
we cannot have duplicates in our

we cannot have duplicates in our

we cannot have duplicates in our
solution so we're gonna have to keep

solution so we're gonna have to keep

solution so we're gonna have to keep
that in the back of our minds so let's

that in the back of our minds so let's

that in the back of our minds so let's
just start the most brute force way you

just start the most brute force way you

just start the most brute force way you
we see that we need three numbers so why

we see that we need three numbers so why

we see that we need three numbers so why
not just have a triple loop right just

not just have a triple loop right just

not just have a triple loop right just
get every single combination of three

get every single combination of three

get every single combination of three
numbers that's probably the first thing

numbers that's probably the first thing

numbers that's probably the first thing
you're gonna try right so let's say our

you're gonna try right so let's say our

you're gonna try right so let's say our
first number is negative three

first number is negative three

first number is negative three
this is our a so we're gonna try each of

this is our a so we're gonna try each of

this is our a so we're gonna try each of
these numbers for B right this could be

these numbers for B right this could be

these numbers for B right this could be
a B this could be a B this could be a B

a B this could be a B this could be a B

a B this could be a B this could be a B
this could be a B this last one can't be

this could be a B this last one can't be

this could be a B this last one can't be
a B because we need at least one number

a B because we need at least one number

a B because we need at least one number
to come after it so that it's a C now if

to come after it so that it's a C now if

to come after it so that it's a C now if
we did that if we did that with our

we did that if we did that with our

we did that if we did that with our
triple loop we would find that there is

triple loop we would find that there is

triple loop we would find that there is
one such combination starting with

one such combination starting with

one such combination starting with
negative three that will sum to zero if

negative three that will sum to zero if

negative three that will sum to zero if
we take one as our B and we take two as

we take one as our B and we take two as

we take one as our B and we take two as
our C value because then we'll have

our C value because then we'll have

our C value because then we'll have
negative three plus one plus two that's

negative three plus one plus two that's

negative three plus one plus two that's
obviously zero so to our solution set we

obviously zero so to our solution set we

obviously zero so to our solution set we
can say okay there's a negative three a

can say okay there's a negative three a

can say okay there's a negative three a
one and A two

one and A two

one and A two
so now when we move we can consider this

so now when we move we can consider this

so now when we move we can consider this
as our first element right but

as our first element right but

as our first element right but
eventually we'll see that we go through

eventually we'll see that we go through

eventually we'll see that we go through
the entire thing and we don't find

the entire thing and we don't find

the entire thing and we don't find
anything that cannot be added to three

anything that cannot be added to three

anything that cannot be added to three
that'll give us a sum of zero we all do

that'll give us a sum of zero we all do

that'll give us a sum of zero we all do
the same for this one and there isn't

the same for this one and there isn't

the same for this one and there isn't
anything now we get to with negative

anything now we get to with negative

anything now we get to with negative
three again though because remember

three again though because remember

three again though because remember
there are duplicates in this array so

there are duplicates in this array so

there are duplicates in this array so
now we're saying again that we're gonna

now we're saying again that we're gonna

now we're saying again that we're gonna
put negative three in this first spot

put negative three in this first spot

put negative three in this first spot
now this is a recipe for finding

now this is a recipe for finding

now this is a recipe for finding
duplicates this is not good and we'll

duplicates this is not good and we'll

duplicates this is not good and we'll
see in this example that's exactly

see in this example that's exactly

see in this example that's exactly
what's gonna happen does another we'll

what's gonna happen does another we'll

what's gonna happen does another we'll
take this as our B we'll take this as

take this as our B we'll take this as

take this as our B we'll take this as
our C again we find negative three plus

our C again we find negative three plus

our C again we find negative three plus
one plus two sums to zero so then we're

one plus two sums to zero so then we're

one plus two sums to zero so then we're
gonna add that again to our result set

gonna add that again to our result set

gonna add that again to our result set
right but that's not what we want we

right but that's not what we want we

right but that's not what we want we
want to eliminate the duplicates so the

want to eliminate the duplicates so the

want to eliminate the duplicates so the
problem was we took negative three as

problem was we took negative three as

problem was we took negative three as
our a value right and then we search the

our a value right and then we search the

our a value right and then we search the
rest of the array for two numbers one

rest of the array for two numbers one

rest of the array for two numbers one
and two that add to zero but then we

and two that add to zero but then we

and two that add to zero but then we
went back here right and we found the

went back here right and we found the

went back here right and we found the
negative three again and we did the

negative three again and we did the

negative three again and we did the
exact same thing the problem is we don't

exact same thing the problem is we don't

exact same thing the problem is we don't
want to have the same number in this

want to have the same number in this

want to have the same number in this
position in the a position twice because

position in the a position twice because

position in the a position twice because
then if there are the numbers that come

then if there are the numbers that come

then if there are the numbers that come
after it we could potentially find

after it we could potentially find

after it we could potentially find
duplicates the solution to this problem

duplicates the solution to this problem

duplicates the solution to this problem
is to sort the input array let me show

is to sort the input array let me show

is to sort the input array let me show
you what I mean so here you can see that

you what I mean so here you can see that

you what I mean so here you can see that
the array is now sorted let's cross out

the array is now sorted let's cross out

the array is now sorted let's cross out
our top right which was unsorted so now

our top right which was unsorted so now

our top right which was unsorted so now
we are going to sort the input array so

we are going to sort the input array so

we are going to sort the input array so
now when we're looking for all

now when we're looking for all

now when we're looking for all
combinations if we find negative three

combinations if we find negative three

combinations if we find negative three
first then that's good okay we'll say

first then that's good okay we'll say

first then that's good okay we'll say
negative three then we find these two

negative three then we find these two

negative three then we find these two
numbers 1 plus 2 and then we find our

numbers 1 plus 2 and then we find our

numbers 1 plus 2 and then we find our
solution great now if we get to negative

solution great now if we get to negative

solution great now if we get to negative
3 again we'll say hey wait a minute this

3 again we'll say hey wait a minute this

3 again we'll say hey wait a minute this
number was already in this position

number was already in this position

number was already in this position
right and we know that because it's its

right and we know that because it's its

right and we know that because it's its
neighbor it's left neighbor is the same

neighbor it's left neighbor is the same

neighbor it's left neighbor is the same
value we don't want to put it twice here

value we don't want to put it twice here

value we don't want to put it twice here
because if we do we'll get the same

because if we do we'll get the same

because if we do we'll get the same
duplicate so we're gonna tell ourselves

duplicate so we're gonna tell ourselves

duplicate so we're gonna tell ourselves
that we already computed all

that we already computed all

that we already computed all
combinations that start with a negative

combinations that start with a negative

combinations that start with a negative
3 so we don't need to do that anymore

3 so we don't need to do that anymore

3 so we don't need to do that anymore
we already visited this one we're gonna

we already visited this one we're gonna

we already visited this one we're gonna
skip this one and then we're gonna go

skip this one and then we're gonna go

skip this one and then we're gonna go
here so that means in this case we're

here so that means in this case we're

here so that means in this case we're
not going to find any more

not going to find any more

not going to find any more
results in the remaining portion of the

results in the remaining portion of the

results in the remaining portion of the
area because they're all positive

area because they're all positive

area because they're all positive
they're never going to sum to zero so

they're never going to sum to zero so

they're never going to sum to zero so
then in our result we're only gonna have

then in our result we're only gonna have

then in our result we're only gonna have
the one triplet negative three one and

the one triplet negative three one and

the one triplet negative three one and
two we eliminated duplicates by not

two we eliminated duplicates by not

two we eliminated duplicates by not
reusing the same element twice I think

reusing the same element twice I think

reusing the same element twice I think
it helps to understand a little bit

it helps to understand a little bit

it helps to understand a little bit
about the statistics of like

about the statistics of like

about the statistics of like
combinations and permutations to like

combinations and permutations to like

combinations and permutations to like
understand exactly why this eliminates

understand exactly why this eliminates

understand exactly why this eliminates
duplicates but I hope this explanation

duplicates but I hope this explanation

duplicates but I hope this explanation
at least helped a little bit so now that

at least helped a little bit so now that

at least helped a little bit so now that
we know to sort the input array and we

we know to sort the input array and we

we know to sort the input array and we
know how to eliminate duplicates once we

know how to eliminate duplicates once we

know how to eliminate duplicates once we
find our first number notice right so

find our first number notice right so

find our first number notice right so
let's say we have a negative 3 so then

let's say we have a negative 3 so then

let's say we have a negative 3 so then
the remaining part of the problem

the remaining part of the problem

the remaining part of the problem
there's only two elements right so it

there's only two elements right so it

there's only two elements right so it
basically reduces to twosome and you

basically reduces to twosome and you

basically reduces to twosome and you
probably know how to solve twosome right

probably know how to solve twosome right

probably know how to solve twosome right
obviously we can put the numbers let's

obviously we can put the numbers let's

obviously we can put the numbers let's
say that this is our first a right so

say that this is our first a right so

say that this is our first a right so
then for the remaining portion we're

then for the remaining portion we're

then for the remaining portion we're
basically going to do to sum and you can

basically going to do to sum and you can

basically going to do to sum and you can
do that with a hash map or a hash set

do that with a hash map or a hash set

do that with a hash map or a hash set
but if you've solved the problem to some

but if you've solved the problem to some

but if you've solved the problem to some
two you know that we don't need to use a

two you know that we don't need to use a

two you know that we don't need to use a
hash map we can use a left and right

hash map we can use a left and right

hash map we can use a left and right
pointer so this is our left and this is

pointer so this is our left and this is

pointer so this is our left and this is
our right and if we find numbers such

our right and if we find numbers such

our right and if we find numbers such
that left and right added to our

that left and right added to our

that left and right added to our
negative three sum to zero then we're

negative three sum to zero then we're

negative three sum to zero then we're
gonna add them to the solution set if

gonna add them to the solution set if

gonna add them to the solution set if
the sum though is too big for example if

the sum though is too big for example if

the sum though is too big for example if
our sum was greater than zero we want to

our sum was greater than zero we want to

our sum was greater than zero we want to
decrease our sum now we can do that by

decrease our sum now we can do that by

decrease our sum now we can do that by
taking our right pointer and shifting it

taking our right pointer and shifting it

taking our right pointer and shifting it
so our right pointer would be shifted

so our right pointer would be shifted

so our right pointer would be shifted
here notice how that decreases the sum

here notice how that decreases the sum

here notice how that decreases the sum
because the numbers are sorted so if

because the numbers are sorted so if

because the numbers are sorted so if
you've sold to some two before you know

you've sold to some two before you know

you've sold to some two before you know
exactly why this works and I encourage

exactly why this works and I encourage

exactly why this works and I encourage
you to watch that video if you want a

you to watch that video if you want a

you to watch that video if you want a
deeper explanation now on the other hand

deeper explanation now on the other hand

deeper explanation now on the other hand
maybe our sum is too small our sum is

maybe our sum is too small our sum is

maybe our sum is too small our sum is
smaller than zero in that case we would

smaller than zero in that case we would

smaller than zero in that case we would
shift our left pointer because the input

shift our left pointer because the input

shift our left pointer because the input
array is sorted if we shift our left

array is sorted if we shift our left

array is sorted if we shift our left
pointer we're increasing the sum now

pointer we're increasing the sum now

pointer we're increasing the sum now
there could be duplicates among these

there could be duplicates among these

there could be duplicates among these
left and right values too for example if

left and right values too for example if

left and right values too for example if
this this one was a negative three

this this one was a negative three

this this one was a negative three
instead right in that case we don't want

instead right in that case we don't want

instead right in that case we don't want
to reuse the same element twice even

to reuse the same element twice even

to reuse the same element twice even
our left and right values so we would

our left and right values so we would

our left and right values so we would
not use the same we would shift our

not use the same we would shift our

not use the same we would shift our
pointer once more over here we don't

pointer once more over here we don't

pointer once more over here we don't
want to reuse the same value for left

want to reuse the same value for left

want to reuse the same value for left
and right either so we don't get any

and right either so we don't get any

and right either so we don't get any
duplicates now in terms of time

duplicates now in terms of time

duplicates now in terms of time
complexity remember we are sorting the

complexity remember we are sorting the

complexity remember we are sorting the
array which is Big O of n log N and then

array which is Big O of n log N and then

array which is Big O of n log N and then
we are not doing the brute force with

we are not doing the brute force with

we are not doing the brute force with
triple loops that would be n cubed we

triple loops that would be n cubed we

triple loops that would be n cubed we
are using the fact that this input array

are using the fact that this input array

are using the fact that this input array
is sorted to our advantage

is sorted to our advantage

is sorted to our advantage
we're using one loop to get to tell us

we're using one loop to get to tell us

we're using one loop to get to tell us
the first value and we're using the

the first value and we're using the

the first value and we're using the
second loop to basically solve two sums

second loop to basically solve two sums

second loop to basically solve two sums
so we're gonna have two nested loops and

so we're gonna have two nested loops and

so we're gonna have two nested loops and
that's going to give us o N squared so

that's going to give us o N squared so

that's going to give us o N squared so
that means obviously the time complexity

that means obviously the time complexity

that means obviously the time complexity
reduces to just of N squared now the

reduces to just of N squared now the

reduces to just of N squared now the
space complexity will depend so for the

space complexity will depend so for the

space complexity will depend so for the
implementation I'm showing it could be

implementation I'm showing it could be

implementation I'm showing it could be
Big O of 1 or it could be Big O of n

Big O of 1 or it could be Big O of n

Big O of 1 or it could be Big O of n
because sorting actually does take extra

because sorting actually does take extra

because sorting actually does take extra
memory in some libraries so it depends

memory in some libraries so it depends

memory in some libraries so it depends
on your implementation of sorting it

on your implementation of sorting it

on your implementation of sorting it
could be O of n ok now let's get to the

could be O of n ok now let's get to the

could be O of n ok now let's get to the
code so we remember we have to return

code so we remember we have to return

code so we remember we have to return
this result as a list of lists and

this result as a list of lists and

this result as a list of lists and
remember the first thing you want to do

remember the first thing you want to do

remember the first thing you want to do
is sort the input array next we want to

is sort the input array next we want to

is sort the input array next we want to
use each number in the input array as a

use each number in the input array as a

use each number in the input array as a
possible first value so I will iterate

possible first value so I will iterate

possible first value so I will iterate
through the index and the value and

through the index and the value and

through the index and the value and
remember we don't want to reuse the same

remember we don't want to reuse the same

remember we don't want to reuse the same
value in the same position twice so if I

value in the same position twice so if I

value in the same position twice so if I
is greater than zero meaning this isn't

is greater than zero meaning this isn't

is greater than zero meaning this isn't
the first value in the input array and

the first value in the input array and

the first value in the input array and
this value a is equal to nums

this value a is equal to nums

this value a is equal to nums
of I minus 1 that means it's the same

of I minus 1 that means it's the same

of I minus 1 that means it's the same
value as before that means we want to

value as before that means we want to

value as before that means we want to
continue we don't want to reuse the same

continue we don't want to reuse the same

continue we don't want to reuse the same
value twice so we're going to continue

value twice so we're going to continue

value twice so we're going to continue
to the next iteration of the loop next

to the next iteration of the loop next

to the next iteration of the loop next
we're going to use our two pointer

we're going to use our two pointer

we're going to use our two pointer
solution for the remaining portion of

solution for the remaining portion of

solution for the remaining portion of
the array to basically solve to sum so

the array to basically solve to sum so

the array to basically solve to sum so
we'll have left and right pointers left

we'll have left and right pointers left

we'll have left and right pointers left
will initially be I've

will initially be I've

will initially be I've
plus one right will be the end of the

plus one right will be the end of the

plus one right will be the end of the
list length minus one left and right

list length minus one left and right

list length minus one left and right
can't be equal so we're gonna say left

can't be equal so we're gonna say left

can't be equal so we're gonna say left
is less than right now we're going to

is less than right now we're going to

is less than right now we're going to
actually compute the sums so we'll say

actually compute the sums so we'll say

actually compute the sums so we'll say
our three sum is a plus numbers of left

our three sum is a plus numbers of left

our three sum is a plus numbers of left
plus numbers of right so if the sum is

plus numbers of right so if the sum is

plus numbers of right so if the sum is
too great remember if it's greater than

too great remember if it's greater than

too great remember if it's greater than
zero which is what we're looking for

zero which is what we're looking for

zero which is what we're looking for
then we need to decrease it in which

then we need to decrease it in which

then we need to decrease it in which
case we would say our right pointer

case we would say our right pointer

case we would say our right pointer
needs to be decremented on the other

needs to be decremented on the other

needs to be decremented on the other
hand if it's too small we need to make

hand if it's too small we need to make

hand if it's too small we need to make
the sum bigger

the sum bigger

the sum bigger
if only I could type today if it's too

if only I could type today if it's too

if only I could type today if it's too
small we need to make it bigger so shift

small we need to make it bigger so shift

small we need to make it bigger so shift
our left pointer to the right the last

our left pointer to the right the last

our left pointer to the right the last
case is if this is equal to zero so of

case is if this is equal to zero so of

case is if this is equal to zero so of
course we have to add it to our result

course we have to add it to our result

course we have to add it to our result
so to our result we're going to append

so to our result we're going to append

so to our result we're going to append
all three numbers so the numbers are a

all three numbers so the numbers are a

all three numbers so the numbers are a
number of left and nums of right now of

number of left and nums of right now of

number of left and nums of right now of
course we got to update our pointers

course we got to update our pointers

course we got to update our pointers
about how do we update it there's a lot

about how do we update it there's a lot

about how do we update it there's a lot
of ways you can do it but I'm going to

of ways you can do it but I'm going to

of ways you can do it but I'm going to
show you the way that you can do it with

show you the way that you can do it with

show you the way that you can do it with
writing the minimal amount of code so

writing the minimal amount of code so

writing the minimal amount of code so
let me just write a comment to show you

let me just write a comment to show you

let me just write a comment to show you
a little bit what if we had the to sum

a little bit what if we had the to sum

a little bit what if we had the to sum
basically for these left and right and

basically for these left and right and

basically for these left and right and
we were at negative 2 negative 2 so

we were at negative 2 negative 2 so

we were at negative 2 negative 2 so
negative 2 0 0 2 &amp; 2 what if our left

negative 2 0 0 2 &amp; 2 what if our left

negative 2 0 0 2 &amp; 2 what if our left
pointer was here and our right pointer

pointer was here and our right pointer

pointer was here and our right pointer
was here in that case we might have we

was here in that case we might have we

was here in that case we might have we
found a solution let's say right then

found a solution let's say right then

found a solution let's say right then
we'd want to update our left pointer

we'd want to update our left pointer

we'd want to update our left pointer
right so then our left pointer gets to

right so then our left pointer gets to

right so then our left pointer gets to
negative 2 again but that's the same one

negative 2 again but that's the same one

negative 2 again but that's the same one
as before so in that case we want to

as before so in that case we want to

as before so in that case we want to
update it one more time to get it over

update it one more time to get it over

update it one more time to get it over
here right now in that case now our sum

here right now in that case now our sum

here right now in that case now our sum
is going to be too big because we're

is going to be too big because we're

is going to be too big because we're
going to be at 0 plus 2 so that's

going to be at 0 plus 2 so that's

going to be at 0 plus 2 so that's
greater than 0 so then our loop is gonna

greater than 0 so then our loop is gonna

greater than 0 so then our loop is gonna
execute saying that this is too big and

execute saying that this is too big and

execute saying that this is too big and
we're gonna shift the right pointer to

we're gonna shift the right pointer to

we're gonna shift the right pointer to
the left but notice how that right value

the left but notice how that right value

the left but notice how that right value
is now the same as it previously was to

is now the same as it previously was to

is now the same as it previously was to
but that's ok

but that's ok

but that's ok
because our sum is gonna our sum is

because our sum is gonna our sum is

because our sum is gonna our sum is
going to evaluate as too big

going to evaluate as too big

going to evaluate as too big
to our right corner is going to be

to our right corner is going to be

to our right corner is going to be
shifted again notice how each value is

shifted again notice how each value is

shifted again notice how each value is
only going to have one corresponding

only going to have one corresponding

only going to have one corresponding
value that it can sum equal to the

value that it can sum equal to the

value that it can sum equal to the
target which is zero so we only have to

target which is zero so we only have to

target which is zero so we only have to
update one pointer and there are two

update one pointer and there are two

update one pointer and there are two
conditions up here we'll update the

conditions up here we'll update the

conditions up here we'll update the
other pointer by itself we don't even

other pointer by itself we don't even

other pointer by itself we don't even
have to worry about it

have to worry about it

have to worry about it
so in this case we're only going to

so in this case we're only going to

so in this case we're only going to
shift our left pointer because we don't

shift our left pointer because we don't

shift our left pointer because we don't
want to have the same sum we're gonna

want to have the same sum we're gonna

want to have the same sum we're gonna
have to use a loop so in this case if

have to use a loop so in this case if

have to use a loop so in this case if
nums of left is equal to num of left

nums of left is equal to num of left

nums of left is equal to num of left
minus one that means it's the same value

minus one that means it's the same value

minus one that means it's the same value
so we have to keep shifting our pointer

so we have to keep shifting our pointer

so we have to keep shifting our pointer
but remember we don't want our left

but remember we don't want our left

but remember we don't want our left
pointer to ever pass the right pointer

pointer to ever pass the right pointer

pointer to ever pass the right pointer
so we're gonna add that to the condition

so we're gonna add that to the condition

so we're gonna add that to the condition
so this is all we need to do now I

so this is all we need to do now I

so this is all we need to do now I
believe unless I've made another stupid

believe unless I've made another stupid

believe unless I've made another stupid
bug we should be able to just return our

bug we should be able to just return our

bug we should be able to just return our
result and pass the problem with the

result and pass the problem with the

result and pass the problem with the
most optimized solution okay I'm praying

most optimized solution okay I'm praying

most optimized solution okay I'm praying
that this works on the first try let's

that this works on the first try let's

that this works on the first try let's
see we passed the test case the first

see we passed the test case the first

see we passed the test case the first
test case they really want you to buy

test case they really want you to buy

test case they really want you to buy
leak code premium this is taking okay so

leak code premium this is taking okay so

leak code premium this is taking okay so
it did pass usually have some stupid

it did pass usually have some stupid

it did pass usually have some stupid
bugs where I mess up a condition but

bugs where I mess up a condition but

bugs where I mess up a condition but
okay so we passed it this is pretty

okay so we passed it this is pretty

okay so we passed it this is pretty
complicated I'm not gonna lie this is a

complicated I'm not gonna lie this is a

complicated I'm not gonna lie this is a
pretty hard problem to solve if you've

pretty hard problem to solve if you've

pretty hard problem to solve if you've
only just solved to some so I really

only just solved to some so I really

only just solved to some so I really
recommend solving to some two as well

recommend solving to some two as well

recommend solving to some two as well
before solving this problem I might have

before solving this problem I might have

before solving this problem I might have
made it look easy with the amount of

made it look easy with the amount of

made it look easy with the amount of
code I wrote but don't let it fool you I

code I wrote but don't let it fool you I

code I wrote but don't let it fool you I
really struggled with this problem the

really struggled with this problem the

really struggled with this problem the
first time I was doing it and you can

first time I was doing it and you can

first time I was doing it and you can
see here and by looking at the evidence

see here and by looking at the evidence

see here and by looking at the evidence
a long time ago well ten months ago I

a long time ago well ten months ago I

a long time ago well ten months ago I
was pretty bad at this as well so don't

was pretty bad at this as well so don't

was pretty bad at this as well so don't
get discouraged if this was helpful

get discouraged if this was helpful

get discouraged if this was helpful
though please leave a like and subscribe

though please leave a like and subscribe

though please leave a like and subscribe
and thank you for watching

